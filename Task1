Lab Exercise: Building an Azure Functions API with OpenAI Integration
Objective
In this lab exercise, you will create an Azure Functions API that communicates with the OpenAI ChatGPT API. By the end of this exercise, you will understand how to set up Azure Functions, handle HTTP triggers, and integrate external APIs using .NET.

Prerequisites
An Azure account with active subscription (Create one at Azure Portal)
Visual Studio 2019 or later with Azure development workload installed
Basic understanding of C# and HTTP protocols
Exercise Steps
Part 1: Setup and Configuration
Task 1: Install Necessary Tools
Download and install Azure CLI from Azure CLI.
Ensure Visual Studio 2019 or later is installed with the Azure development workload.
Task 2: Create an Azure Function App
Open Visual Studio and create a new project.
Select Azure Functions as project type, name your project, and choose a location.
Select the HTTP trigger template, set the authorization level to Function, and create the project.
Part 2: OpenAI API Integration
Task 3: Obtain OpenAI API Key
Register at OpenAI and get your API key.
Task 4: Add OpenAI SDK to Your Project
Open the Package Manager Console in Visual Studio and execute:
bash
Copy code
Install-Package OpenAI -Version <latest-version>
Task 5: Configure API Key in Azure
Go to your published Function App in the Azure portal.
Navigate to Configuration under Settings.
Add a new application setting named OpenAIKey and paste your OpenAI API key as its value.
Part 3: Modifying and Testing the Azure Function
Task 6: Modify Your Azure Function
Open Function1.cs or your function's code file in Visual Studio.
Add the following using directive at the top of the file:
csharp
Copy code
using OpenAI_API;
Replace the function code with:
csharp
Copy code
public static async Task<IActionResult> Run(
    [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
    ILogger log)
{
    string prompt = req.Query["prompt"];

    var apiKey = Environment.GetEnvironmentVariable("OpenAIKey");
    var api = new OpenAIAPI(apiKey);

    var response = await api.Completions.CreateCompletionAsync(prompt, engine: "text-davinci-003");

    return new OkObjectResult(response.ToString());
}
Save your changes.
Task 7: Publish and Test Your Function
Republish your Azure Function to Azure.
Test the function locally using Visual Studio and an HTTP client like Postman.
After local testing, use the published URL to test the function deployed in Azure.
